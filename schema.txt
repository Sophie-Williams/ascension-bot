SUMMARY

  The server creates a game id with which log files can be associated
  (server/logs). Next it runs on the specified port, listening at three HTTP
  endpoints, described later.

  The server waits for two clients to connect then begins the game. A client
  should request the state until it is the client's turn, at which point it
  should send its moves to the server (receiving the state back after each
  batch of moves) until it is done with its turn.

  Once the game has ended, the server will mark the state in its response and the
  clients should stop polling.


SERVER ENDPOINTS

  The webserver has three endpoints.

  POST /join -- join the game

    Only legal if less than two players have joined the game (i.e.,
    state["player_count"] < 2. This increments the player count, and if the
    game has reached two players, it initializes the board, inserts that into
    the state, and sets the status to "playing".

    Return values:
      {"player_index": <0-based index>}
        OR
      {"error": <error string>}

  GET /state -- request the current state

    Simply returns the current state. Players should poll this while either the
    game hasn't started, or it is not the player's turn. Returns a JSON-encoded
    state dictionary.

  POST /moves -- submit moves

    Accepts a JSON dictionary of moves. The server applies each of the moves
    to the board and then returns the state. Returns a JSON-encoded state
    dictionary.

    The client should send a dictionary with the following structure:

      player_index - Which player this is. This was returned by /join
      moves - A list of the following objects
        type - "acquire" | "play" | "defeat" | "activate" | "end_turn"
        card_name - Valid if the move type is not "end_turn". The effect depends
          on the type of the move.

            acquire - Acquire the card. Must either be in the center row, or if
              the card name is "Mystic" or "Heavy Infantry", there must be at
              least one left to be acquired.

            defeat - Must either be "Cultist" or in the center row.

            play - Must be in the player's hand.

            activate - Used to activate a construct. Must be in the player's
              constructs pile.


STATE DICTIONARY

  The state dictionary will always have the keys "player_count", "status", and
  "error". The entry for "error" will be empty unless there is an error (in
  which case no one should make a move).

  status
    not ready - Players are still joining the game. No one should make a move.
    playing - Players are playing the game. No one should join.
    ended - The game has ended. No one should join or make a move.

  Once the game has started, there will also be a board key.

  board
    current_turn - Which turn it is (0th, 1st, 2nd, ...). Note that this is not
      which round it is (round = floor(turn / 2)).
    current_player_index - Whose turn it is
    honor_remaining - How much honor is left in the game.

    void - A list of the names of the cards that have been banished.
    center - A list of the names of the cards in the center row.

    mystics - How many Mystics are left.
    heavy - How many Heavy Infantry are left.
    cultist - Always 1.

    players - A list of the following objects
      hand - A list of the names of the cards in the player's hand.
      discard - A list of the names of the cards in the player's discard.
      constructs - a list of the names of the player's current constructs.

      runes_remaining - How many runes the player has left this turn.
      power_remaining - How much power the player has left this turn.
      honor - How much honor the player has acquired so far. Note that this
        does not include honor from cards.

      moves - A list of all moves the player has played, as described above,
        with the addition of a turn (which turn the move was played).

